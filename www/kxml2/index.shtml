<html>
<head><title>kXML 2</title></head>
<body bgcolor="#ffffff">
<!--#include virtual="../prolog.shtml" -->

<h1>kXML 2</h1>

kXML 2 implements the XmlPull API. Please find general information about
XmlPull parsers at <a href="http://xmlpull.org>xmlpull.org</a>.

<h2>Parsing Element-Only and Text-Only Content</h2>

<p>Please use the method <em>nextTag()</em> to parse element-only content 
and <em>nextText()</em> to parse text-only content. <em>require()</em> may 
optionally be used to assert a certain parser state.  The following sample 
illustrates both situations and methods. The outer element <em>elements</em> has 
element-only content; the contained <em>text</em>-elements have text-only content:</p>

<pre>
&lt;elements&gt;
  &lt;text&gt;text1&lt;/text&gt;
  &lt;text&gt;text2&lt;/text&gt;
&lt;/elements&gt;  
</pre>  

<p>Parsing Code</p>
<pre>
parser.nextTag();
parser.require(XmlPullParser.START_TAG, null, "elements");

while(parser.nextTag() == XmlPullParser.START_TAG) {
  parser.require(XmlPullParser.START_TAG, null, "text");

   // handle element content
   System.out.println("text content: "+ parser.nextText());

  parser.require(XmlPullParser.END_TAG, null, "text");
}

parser.require(XmlPullParser.END_TAG, null, "elements");
</pre>

<p>Please note that the calls <em>require()</em> are optional assertions, 
they may be left out completely. <em>nextTag()</em> advances to the next 
start or end tag, skipping insignificant events such as white space, 
comments and PIs. <em>nextText()</em> requires that the current position 
is a start tag. It returns the text content of the corresponding element. 
The post condition is that the current position is an end tag</p>

<!--#include virtual="../epilog.shtml" -->
</body>
</html>